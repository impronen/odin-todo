6/3/2023

Next to implement:
change completed from sidebar to overdue 
Add filter based on importance &  ascending/descending to taskview top panel
This would contain a signifyer of what list you are looking, based on selection 
from sidebar - when filters are applied, that will first be used as a basis for
tasks to be fed to selected sorting / filtering functions


12/2/2023

Use of local storage.


model / storage has taskArray.taskStorage

On load, index.js/main.js has a check of if localstorage lenght is > 0,
if it is ==> the contents of local storage are pushed to taskStorage

While using the app, after updates to DOM and storage have been made,
localstorage is purged and taskStorage is again pushed there.


Updates for 1/2/2023

Decided to wrap storage and all DOM stuff to IIFE style. 
This will allow a better seperation of concerns and mangeability. Less stuff to
import / export and less changes needed when adding new features.

ALL that relates or changes / generates the DOM will be in DOM.js
The storage will have one iife function object, with all the methods needed to
filter tasks/projects in a higher level than changing the properties directly


//////////////////////////////////////////

NEXT: wrap project and task arrays into objects. Attach methods to manipulate these arrays to these
objects, so they can be called as needed.

Figure out a way to have a new task object to look for the existence of project with a similar name and join
that task to the project. IF no project with name is in existense, create project, then attach this to the
newly created project. 

Initial notes:
Modules or controllers needed:

1) Task storage
2) Task controller / creator 
2.5) Task creator in DOM (visual representation to feed information to task controller)
3) Project controller (as these will be relatively simple, there is no need for seperate storage)
3.5) Project creator in DOM
4) Layout creator (to create overall layout)
5) Task UI controller (renders the tasks as cards on the screen - contains methods for filtering view)

1) TASK STORAGE


2) TASK CONTROLLER / CREATOR 

Creates an task object.
Object needs to contain datapoints for: 
    -name
    -Project
    -priority (low / medium / high)
    -due date
    -completion status
    -additional info on task 

Object needs to contain methods for manipulating these data points (see here if 
inheritance can be used to benefit) such as marking completed, editing descripition, changing
from project to another, etc. So that task ui controller can tap to them but they remain selfcontained.
